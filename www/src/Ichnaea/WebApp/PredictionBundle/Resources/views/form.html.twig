{% extends '::GUI/withContainer.html.twig' %}

{% block page_title %}Create a training{% endblock %}

{% block body %}
<div class="container">
<legend>Matrix Prediction</legend>
<form method="post" id="matrixForm" class="form-horizontal" action="
{% if update is defined %}
{{path('update_prediction_matrix_action',{matrix_id: matrix_id, training_id: training_id, prediction_id: prediction_id})}}
{% else %}
{{path('create_prediction_matrix_action',{matrix_id: matrix_id, training_id: training_id})}}
{% endif %}
">
<p>Here you can upload your new matrix for make predictions</p>
 <div class="control-group">
  <label class="control-label" for="name">Prediction matrix name</label>
  <div class="controls">
   <input type="text" id="name" name="name" placeholder="Prediction matrix's name" {% if update is defined %}value="{{ name }}"{% else %}value=""{% endif %}>
  </div>
 </div>
 <div class="control-group">
  <label class="control-label" for="description">Description</label>
  <div class="controls">
   <input type="text" id="description" name="description" placeholder="Prediction matrix's description" {% if update is defined %}value="{{ description }}"{% else %}value=""{% endif %}>
  </div>
 </div>
 <div class="control-group">
  <label class="control-label" for="files">Matrix file - only csv</label>
  <div class="controls">
   <input type="file" id="files" name="files" multiple />
  </div>
  <label class="control-label" for="filesXSL">Matrix file - only xsl</label>
  <div class="controls">
   <input type="file" id="filesXSL" name="filesXSL" multiple />
  </div>
  <div class="controls">
   <textarea id="out" name="content"></textarea>
  </div>
  </div>
  <div class="form-actions">
        <button type="submit" class="btn btn-primary">Save changes</button>
  </div>
  <legend>Columns trained<a class="btn btn-mini" href="{{path('download_training_template', {'training_id': training_id, 'matrix_id': matrix_id })}}" name="download_matrix_template" title="Download training template"><i class="icon-download"></i></a></legend>
  
  <div style="overflow-x: auto;">
  <table class="table table-bordered">
  <tr>
  <th style="background-color: grey">
  Alias
  </th>
  {% for c in columns%}
  <th>  
     {{ c.name }}<br>
  </th>
  {% endfor %}
  <th style="background-color: white;">&nbsp;</th>
  </tr>
  <tr>
  <th style="background-color: grey">Variable</th>
  {% for c in columns%}
  <th>  
  	{% if c.variable is not null %}{{ c.variable.name }}<br>{% endif %}
  </th>
  {% endfor %}
  <th style="background-color: white;">&nbsp;</th>
  </tr>
  <tr>
  <th style="background-color: grey">
    Season Set
  </th>
  {% for c in columns%}
  <th>  
  	{% if c.seasonSet is not null %}{{ c.seasonSet.name }}<br>{% endif %}
  </th>
  {% endfor %}
  <th style="background-color: white;">Season(optional)</th>
  </tr>
  </table>
  </div>
</div>
{% endblock %}

{% block extra_header_javascript %}
<script src="/Ichnaea/js/js-xls/xls.js"></script>
{% endblock %}

{% block extra_javascript %}
function importXSLFileIntoCSVInput(fromInput){
  // Check for the various File API support.
  if (window.File && window.FileReader && window.FileList && window.Blob) {
    // Great success! All the File APIs are supported.
  } else {
    alert('The File APIs are not fully supported in this browser. You must copy the content of the season file for each one season.');
  }

  $('#'+fromInput).change(function (e){
  e = e || window.event;
  e.preventDefault(); 
  e = e.originalEvent || e;
  console.log(e);
  var f = e.target.files[0];  
  var reader = new FileReader();  
  /*reader.onload = function (evt) {  
    console.log(evt.target.result);
    $('#'+toInput).val(evt.target.result);  
  };
  reader.readAsText(file);*/
  var name = f.name;
  reader.onload = function(e) {
    var data = e.target.result;
    if(use_worker && typeof Worker !== 'undefined') {
      xlsworker(data, process_wb);
    } else {
      /*var cfb = XLS.CFB.read(data, {type: 'binary'});
      //var arr = String.fromCharCode.apply(null, new Uint8Array(data));
      //var cfb = XLS.CFB.read(btoa(arr), {type: 'base64'});
      var wb = XLS.parse_xlscfb(cfb);*/
      var wb = XLS.read(data, {type:'binary'});
      process_wb(wb);
    }
  };
  reader.readAsBinaryString(f);
});
}

var use_worker = true;
function xlsworker(data, cb) {
        var worker = new Worker('/Ichnaea/js/js-xls/xlsworker.js');
        worker.onmessage = function(e) {
                switch(e.data.t) {
                        case 'ready': break;
                        case 'e': console.error(e.data); break;
                        case 'xls': cb(e.data.d); break;
                }
        };
        worker.postMessage(data);
}

function get_radio_value( radioName ) {
        var radios = document.getElementsByName( radioName );
        for( var i = 0; i < radios.length; i++ ) {
                if( radios[i].checked ) {
                        return radios[i].value;
                }
        }
}

function to_json(workbook) {
        var result = {};
        workbook.SheetNames.forEach(function(sheetName) {
                var roa = XLS.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                if(roa.length > 0){
                        result[sheetName] = roa;
                }
        });
        return result;
}
function to_csv(workbook) {
        var result = [];
        workbook.SheetNames.forEach(function(sheetName) {
                var csv = XLS.utils.make_csv(workbook.Sheets[sheetName], {FS: ';'});
                if(csv.length > 0){
                        //result.push("SHEET: " + sheetName);
                        //result.push("");
                        result.push(csv);
                }
        });
        return result.join("\n");
}

function to_formulae(workbook) {
        var result = [];
        workbook.SheetNames.forEach(function(sheetName) {
                var formulae = XLS.utils.get_formulae(workbook.Sheets[sheetName]);
                if(formulae.length > 0){
                        //result.push("SHEET: " + sheetName);
                        //result.push("");
                        result.push(formulae.join("\n"));
                }
        });
        return result.join("\n");
}
var tarea = document.getElementById('b64data');
function b64it() {
/*
        var cfb = XLS.CFB.read(tarea.value, {type: 'base64'});
        var wb = XLS.parse_xlscfb(cfb);
*/
        var wb = XLS.read(tarea.value, {type:'base64'});
        process_wb(wb);
}

function process_wb(wb) {
        if(typeof Worker !== 'undefined') XLS.SSF.load_table(wb.SSF);
        var output = "";
        switch(get_radio_value("format")) {
                case "json":
                        output = JSON.stringify(to_json(wb), 2, 2);
                        break;
                case "form":
                        output = to_formulae(wb);
                        break;
                default:
                        output = to_csv(wb);
        }
        if(out.innerText === undefined) out.textContent = output;
        else out.innerText = output;
}
var drop = document.getElementById('drop');
function handleDragover(e) {
        e.stopPropagation();
        e.preventDefault();
        e.dataTransfer.dropEffect = 'copy';
}

$(document).ready(function(){
    importFileIntoInput('files', 'out');
    importXSLFileIntoCSVInput('filesXSL');
    
});
{% endblock %}
