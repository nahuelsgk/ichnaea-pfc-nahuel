<?php

namespace Ichnaea\Amqp\Model;

/**
 * This class represents a response that
 * contains progress data.
 *
 * This response contains:
 * * an unique identifier
 * * the progress of the request
 * * the start time of the request
 * * the expected end time of the request
 * * the data generated by the request at the end
 * * possible error if the request fails
 *
 * @author Miguel Ibero <miguel@ibero.me>
 */
class ProgressResponse
{
    /**
     * Format for converting times to string
     *
     * @var string
     */
    const DateTimeFormat = "c";

    /**
     * The request id
     *
     * @var string
     */
    private $id;

    /**
     * The unitary request progress
     *
     * @var float
     */
    private $progress = 0;

    /**
     * The start time
     *
     * @var \DateTime
     */
    private $start = null;

    /**
     * The end time
     *
     * @var \DateTime
     */
    private $end = null;

    /**
     * The error string
     *
     * @var string
     */
    private $error = null;

    /**
     * Constructor for the build_models response
     *
     * @param string $id identifier for the request
     */
    public function __construct($id=null)
    {
        if (!$id) {
            $id = uniqid();
        }
        $this->id = $id;
        $this->setStart("now");
    }

    /**
     * Sets the progress
     *
     * @param float $p the progress
     */
    public function setProgress($p)
    {
        $p = floatval($p);
        if ($p < 0 || $p > 1) {
            throw new \InvalidArgumentException("Progress should be between 0.0 and 1.0");
        }
        $this->progress = $p;
    }

    /**
     * Sets the start time. The parameter
     * can be a timestamp, a string or a \DateTime object
     *
     * @param mixed $start the start time
     */
    public function setStart($start)
    {
        if ($start) {
            if (is_string($start)) {
                $start = strtotime($start);
            }
            $this->start = new \DateTime();
            $this->start->setTimestamp($start);
        }
    }

    /**
     * Sets the end time. The parameter
     * can be a timestamp, a string or a \DateTime object
     *
     * @param mixed $end the end time
     */
    public function setEnd($end)
    {
        if ($end) {
            if (is_string($end)) {
                $end = strtotime($end);
            }
            $this->end = new \DateTime();
            $this->end->setTimestamp($end);
        }
    }

    /**
     * Sets the error
     *
     * @param string $err the error
     */
    public function setError($err)
    {
        $this->error = $err;
    }

    /**
     * Gets the id
     *
     * @return string the id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Gets the progress
     *
     * @return float the progress
     */
    public function getProgress()
    {
        return $this->progress;
    }

    /**
     * Gets the start time
     *
     * @return \DateTime the start time
     */
    public function getStart()
    {
        return $this->start;
    }

    /**
     * Gets the end time
     *
     * @return \DateTime the end time
     */
    public function getEnd()
    {
        return $this->end;
    }

    /**
     * Gets the error
     *
     * @return string the error
     */
    public function getError()
    {
        return $this->error;
    }

    /**
     * Returns if the response has an error
     *
     * @return bool true if there is an error
     */
    public function hasError()
    {
        return $this->error != null;
    }

    /**
     * Returns if the response has an end time
     *
     * @return bool true if there is an end time
     */
    public function hasEnd()
    {
        return $this->end != null;
    }

    /**
     * Export the response to an array
     *
     * @return array the response data
     */
    public function toArray()
    {
        $a = array(
            "id"		=> $this->id,
            "progress"	=> $this->progress,
            "start"		=> $this->start,
            "end"		=> $this->end,
            "error"		=> $this->error,
        );
        if ($a['start'] instanceof \DateTime) {
            $a['start'] = $a['start']->format(self::DateTimeFormat);
        }
        if ($a['end'] instanceof \DateTime) {
            $a['end'] = $a['end']->format(self::DateTimeFormat);
        }

        return $a;
    }

    /**
     * Update the response from an array
     *
     * @param array the response data
     */
    public function update(array $data)
    {
        if (array_key_exists('progress', $data)) {
            $this->setProgress($data['progress']);
        }
        if (array_key_exists('start', $data)) {
            $this->setStart($data['start']);
        }
        if (array_key_exists('end', $data)) {
            $this->setEnd($data['end']);
        }
        if (array_key_exists('error', $data)) {
            $this->setError($data['error']);
        }
    }
}
